- Básico do Ruta e exemplos

Obs.: Todas as regras estão em um mesmo arquivo porque a versão atual do plugin do Ruta para Maven não suporta chamada de um script Ruta a partir de outro.

== INTRODUÇÃO 

A referência principal (e única) do Ruta encontra-se a seguir:
https://uima.apache.org/d/ruta-current/tools.ruta.book.html

O arquivo Main.ruta pode servir como exemplo de uso.

BasicTypeSystem, InternalTypeSystem e MainTypeSystem são arquivos XML que contêm definições básicas (token, annotations, etc.). Esses arquivos são necessários e normalmente não devem ser modificados. São importados com o comando IMPORT, como pode ser visto no cabeçalho do arquivo Main.ruta.

Os demais typesystems (exemplo: MainTypeSystem) são gerados a partir do script Ruta (após `mvn install`), e por isso não devem ser gerados manualmente.

Uma anotação do Ruta é uma marcação feita no texto, que contém início e fim (posições dos caracteres do texto original), e podem conter atributos chamados de "features". 

Para declarar um tipo de anotação, basta escrever `DECLARE MY_ANNOTATION;` no caso de não conter features. Caso contenha, a declaração é feita da seguinte forma (no caso de haver 2 features, por exemplo): `DECLARE Annotation MY_ANNOTATION(String my_feature1, String my_feature2)`.

Estamos utilizando anotações sem features para marcar classes gramaticais, seus tipos e outros tipos de palavras. Isso facilita e torna intuitivo escrever as regras, como veremos adiante. Para marcar problemas, estamos utilizando uma anotação PROBLEM com duas features, a saber: "id" (uma identificação da regra) e "suggestion" (um comando de sugestão), que serão explicados posteriormente neste arquivo.



== MARCAÇÃO

Um cgToken possui diversos atributos, tais como: "lexeme" (a palavra original), "lemma" (a palavra sem flexões), "pos" (classes gramaticais e afins), "features" (gênero, número, pessoa, etc.) (não confundir com o conceito de feature definido no item anterior), entre outros. Vale lembrar que o CoGrOO separa contrações em tokens distintos, exemplos: do = de + o, à = a + a.

Uma regra é escrita da seguinte forma: listam-se os tipos de tokens consecutivos a serem marcados, separados por whitespaces. Abre-se uma chave após cada um deles para colocarmos condições (se necessário), e na chave do último deles, colocamos uma seta e o nome da anotação (se não possuir features) ou o comando CREATE, tal como abaixo `CREATE(PROBLEM, 2, 3, "id" = "0", "suggestion" = "swap 1 2")`.

Exemplos:
Uma vez já marcados substantivos masculinos com MALE_NOUN e "à" com CRASE_A, podemos escrever:

CRASE_A
MALE_NOUN{
 -> CREATE(PROBLEM, 1, 2, "id" = "1-2",
     "suggestion" = "...")};
     
Isso fará com que, sempre que houver um "à" (CRASE_A) seguido de um substantivo masculino (MALE_NOUN), será criado um PROBLEM nos tokens 1 e 2 da regra (no caso, todos), com id "1-2". A sintaxe da suggestion foi omitida aqui e será explicada posteriormente.
 
Obs.: O CoGrOO nem sempre marca corretamente as classes gramaticais, por isso algumas vezes as regras falharão, ainda que estejam escritas corretamente.

== SINTAXE DA SUGESTÃO

A seguinte sintaxe foi definida pela equipe de Laboratório de Programação Extrema de 2015. É uma sintaxe fácil de ler e escrever, que o código do CoGrOO (em Java) trata e transforma nas sugestões reais.

Há cinco tipos de sugestões, que são apresentados a seguir em forma de exemplo.

1. Trocar lexeme por string previamente conhecida:
replace 3 with 'souber'
Isto trocará o terceiro token da regra por 'souber'.

2. Permutar dois tokens:
swap 3 4
Isto trocará de posições os tokens 3 e 4 da regra.

3. Trocar com mapping:
replace 1 with {'caber' => 'couber' 'fazer' => 'fizer'}
Isto trocará o token 1 de acordo com seu valor original: se for 'caber', passará a ser 'couber'; se for 'fazer', passará a ser 'fizer'; e assim por diante. Pode haver qualquer quantidade > 1 de casos.

4. Trocar tags (gênero, número, etc.) por tags previamente conhecidas
replace 5 with 1 in (number=plural gender=female)
Isto substituirá o 5º token da regra pela palavra que anteriormente estava no 1º token da regra, porém após a modificação do gênero (para feminino) e do número (para plural). Pode haver uma ou mais tags definidas dentro dos parênteses.
Obs.: geralmente, os índices (que no exemplo acima são 5 e 1) são iguais, isto é, flexionamos uma palavra e mantemo-las na posição original.

5. Trocar tags de um token para concordar com outro token
set (gender number) of 1 to match 2 
Isto trocará o gênero e o número do 1º token para concordarem com o gênero e o número do 2º token da regra. Pode haver uma ou mais tags nos parênteses.


Para sugerir mais de uma substituição simultaneamente, basta separar os comandos por ";", como no exemplo abaixo:
replace 1 with 1 in (class=finitive-verb number=plural person=third tense=present mood=indicative); replace 2 with 'anexos'

No caso de haver mais de uma possibilidade de sugestão, basta separá-las por "|".




== SINTAXE DOS TESTES
Os arquivos de testes (.txt), que se encontram na pasta Tests (subdiretório de onde está o Main.ruta), possuem linhas contendo frases já com as respectivas sugestões esperadas.

O texto a ser alterado é escrito entre colchetes, dentro dos quais se encontram também as sugestões após "=>" e separadas por barra. Após os colchetes, há o id da regra correspondente entre parênteses.

Exemplo:
Comprei [casacos bonito => casacos bonitos / casaco bonito](17) ontem.

Linhas começando com # são ignoradas, e podem ser utilizadas para comentários ou para testes desativados.

== LINK 

Lista de e-mails do Ruta:
http://news.gmane.org/gmane.comp.apache.uima.general


- Sintaxes da sugestão e dos testes
