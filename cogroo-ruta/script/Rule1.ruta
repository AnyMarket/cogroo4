TYPESYSTEM TypeSystem;

IMPORT opennlp.uima.Token FROM TypeSystem AS cgToken;

SCRIPT Base;
Document{-> CALL(Base)};


DECLARE LEXEME_A;
DECLARE PREPOSITION_A;
DECLARE ARTICLE_A;
DECLARE CRASE;
DECLARE CRASE_A;
DECLARE CRASE_AS;


DECLARE FEMALE_NOUN;
DECLARE MALE_NOUN;
DECLARE PLURAL_NOUN;
DECLARE SINGULAR_NOUN;

DECLARE EM_RELACAO;


DECLARE Annotation PROBLEM (String description);

cgToken{REGEXP(cgToken.lexeme, "a(s?)", true) -> LEXEME_A};
cgToken{AND(IS(PREPOSITION), IS(LEXEME_A)) -> PREPOSITION_A};
cgToken{AND(AND(AND(IS(ARTICLE), IS(FEMALE))), IS(LEXEME_A)) -> ARTICLE_A};
cgToken{AND(IS(PREPOSITION_A), IS(ARTICLE_A)) -> MARKONCE(CRASE)};

cgToken{AND(IS(CRASE), IS(SINGULAR)) -> MARKONCE(CRASE_A)};
cgToken{AND(IS(CRASE), IS(PLURAL))   -> MARKONCE(CRASE_AS)};


cgToken{AND(IS(MALE), IS(NOUN)) -> MALE_NOUN};
cgToken{AND(IS(FEMALE), IS(NOUN)) -> FEMALE_NOUN};
cgToken{AND(IS(PLURAL), IS(NOUN)) -> PLURAL_NOUN};
cgToken{AND(IS(SINGULAR), IS(NOUN)) -> SINGULAR_NOUN};


cgToken{REGEXP(cgToken.lexeme, "em_relação", true) -> EM_RELACAO};


CRASE MALE_NOUN{NOT(IS(PROBLEM)) -> CREATE(PROBLEM, 1, 2, "description" = "Crase com substantivo masculino.")};
CRASE_A PLURAL_NOUN{NOT(IS(PROBLEM)) -> CREATE(PROBLEM, 1, 2, "description" = "Crase com substantivo no plural.")};
CRASE_AS SINGULAR_NOUN{NOT(IS(PROBLEM)) -> CREATE(PROBLEM, 1, 2, "description" = "Crase com substantivo no singular.")};

CRASE VERB{NOT(IS(PROBLEM)) -> CREATE(PROBLEM, 1, 2, "description" = "Crase antes de verbo.")};

//EM_RELACAO LEXEME_A{NOT(IS(CRASE))} FEMALE_NOUN {NOT(IS(PROBLEM)) -> CREATE(PROBLEM, 1, 2, 3, "description" = "A expressão em relação pede crase.")};
