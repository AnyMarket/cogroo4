PACKAGE cogroo.ruta;

TYPESYSTEM BaseTypeSystem;

IMPORT opennlp.uima.Token FROM TypeSystem AS cgToken;
IMPORT opennlp.uima.Sentence        FROM TypeSystem AS cgSentence;

DECLARE FAZER_TEMPO;
DECLARE EXP_TEMPO_S;
DECLARE EXP_TEMPO_P;
DECLARE VERB_LIST;

cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme,"(fazem|fizeram|farão)",true)) -> FAZER_TEMPO};
cgToken{AND(IS(NOUN),REGEXP(cgToken.lexeme,"(horas|dias|semanas|meses|bimestres|
    trimestres|quadrimestres|semestres|anos|décadas|séculos|milênios)",true)) -> EXP_TEMPO_P};
cgToken{OR(IS(EXP_TEMPO_P),REGEXP(cgToken.lexeme,"(hora|dia|semana|mês|bimestre|
    trimestre|quadrimestre|semestre|ano|década|século|milênio)",true)) -> EXP_TEMPO_S};
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme,"(vão|iam|devem|deviam|deveriam|
    deverão|podem|podiam|poderiam|poderão)",true)) -> VERB_LIST};

// Rule 42
cgToken{NOT(IS(PERSONAL_PRONOUN))}
FAZER_TEMPO
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_INFO,1,2,3,
    "description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.",
    "suggestion"="<ReplaceMapping index=\"1\" key=\"fazem\" value=\"faz\"/> <ReplaceMapping index=\"1\" key=\"fizeram\" value=\"fez\"/> <ReplaceMapping index=\"1\" key=\"farão\" value=\"fará\"/>")};

FAZER_TEMPO{STARTSWITH(cgSentence)}
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2), CREATE(PROBLEM_INFO,1,2,
    "description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.",
    "suggestion"="<ReplaceMapping index=\"0\" key=\"fazem\" value=\"faz\"/> <ReplaceMapping index=\"0\" key=\"fizeram\" value=\"fez\"/> <ReplaceMapping index=\"0\" key=\"farão\" value=\"fará\"/>")};

 
// Rule 43
cgToken{NOT(IS(PERSONAL_PRONOUN))}
FAZER_TEMPO
NUMERAL
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3,4), CREATE(PROBLEM_INFO,1,2,3,4,
    "description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.",
    "suggestion"="<ReplaceMapping index=\"1\" key=\"fazem\" value=\"faz\"/> <ReplaceMapping index=\"1\" key=\"fizeram\" value=\"fez\"/> <ReplaceMapping index=\"1\" key=\"farão\" value=\"fará\"/>")};

FAZER_TEMPO{STARTSWITH(cgSentence)}
NUMERAL
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_INFO,1,2,3,
    "description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.",
    "suggestion"="<ReplaceMapping index=\"0\" key=\"fazem\" value=\"faz\"/> <ReplaceMapping index=\"0\" key=\"fizeram\" value=\"fez\"/> <ReplaceMapping index=\"0\" key=\"farão\" value=\"fará\"/>")};

// Rule 44
cgToken{NOT(IS(PERSONAL_PRONOUN))}
VERB_LIST
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme, "fazer", true))}
NUMERAL
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3,4,5), CREATE(PROBLEM_INFO,1,2,3,4,5,
    "description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.",
    "suggestion" = "<ReplaceMapping index=\"1\" key=\"vão\" value=\"vai\"/> <ReplaceMapping index=\"1\" key=\"iam\" value=\"ia\"/> <ReplaceMapping index=\"1\" key=\"devem\" value=\"deve\"/> <ReplaceMapping index=\"1\" key=\"deviam\" value=\"devia\"/> <ReplaceMapping index=\"1\" key=\"deveriam\" value=\"deveria\"/> <ReplaceMapping index=\"1\" key=\"deverão\" value=\"deverá\"/> <ReplaceMapping index=\"1\" key=\"podem\" value=\"pode\"/> <ReplaceMapping index=\"1\" key=\"podiam\" value=\"podia\"/> <ReplaceMapping index=\"1\" key=\"poderiam\" value=\"poderia\"/> <ReplaceMapping index=\"1\" key=\"poderão\" value=\"poderá\"/>")};

VERB_LIST{STARTSWITH(cgSentence)}
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme, "fazer", true))}
NUMERAL
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3,4), CREATE(PROBLEM_INFO,1,2,3,4,
    "description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.",
    "suggestion" = "<ReplaceMapping index=\"0\" key=\"vão\" value=\"vai\"/> <ReplaceMapping index=\"0\" key=\"iam\" value=\"ia\"/> <ReplaceMapping index=\"0\" key=\"devem\" value=\"deve\"/> <ReplaceMapping index=\"0\" key=\"deviam\" value=\"devia\"/> <ReplaceMapping index=\"0\" key=\"deveriam\" value=\"deveria\"/> <ReplaceMapping index=\"0\" key=\"deverão\" value=\"deverá\"/> <ReplaceMapping index=\"0\" key=\"podem\" value=\"pode\"/> <ReplaceMapping index=\"0\" key=\"podiam\" value=\"podia\"/> <ReplaceMapping index=\"0\" key=\"poderiam\" value=\"poderia\"/> <ReplaceMapping index=\"0\" key=\"poderão\" value=\"poderá\"/>")};
     
// Rule 45
cgToken{NOT(IS(PERSONAL_PRONOUN))}
VERB_LIST
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme, "fazer", true))}
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3,4), CREATE(PROBLEM_INFO,1,2,3,4,
    "description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.",
    "suggestion" = "<ReplaceMapping index=\"1\" key=\"vão\" value=\"vai\"/> <ReplaceMapping index=\"1\" key=\"iam\" value=\"ia\"/> <ReplaceMapping index=\"1\" key=\"devem\" value=\"deve\"/> <ReplaceMapping index=\"1\" key=\"deviam\" value=\"devia\"/> <ReplaceMapping index=\"1\" key=\"deveriam\" value=\"deveria\"/> <ReplaceMapping index=\"1\" key=\"deverão\" value=\"deverá\"/> <ReplaceMapping index=\"1\" key=\"podem\" value=\"pode\"/> <ReplaceMapping index=\"1\" key=\"podiam\" value=\"podia\"/> <ReplaceMapping index=\"1\" key=\"poderiam\" value=\"poderia\"/> <ReplaceMapping index=\"1\" key=\"poderão\" value=\"poderá\"/>")};

VERB_LIST{STARTSWITH(cgSentence)}
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme, "fazer", true))}
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_INFO,1,2,3,
    "description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.",
    "suggestion" = "<ReplaceMapping index=\"0\" key=\"vão\" value=\"vai\"/> <ReplaceMapping index=\"0\" key=\"iam\" value=\"ia\"/> <ReplaceMapping index=\"0\" key=\"devem\" value=\"deve\"/> <ReplaceMapping index=\"0\" key=\"deviam\" value=\"devia\"/> <ReplaceMapping index=\"0\" key=\"deveriam\" value=\"deveria\"/> <ReplaceMapping index=\"0\" key=\"deverão\" value=\"deverá\"/> <ReplaceMapping index=\"0\" key=\"podem\" value=\"pode\"/> <ReplaceMapping index=\"0\" key=\"podiam\" value=\"podia\"/> <ReplaceMapping index=\"0\" key=\"poderiam\" value=\"poderia\"/> <ReplaceMapping index=\"0\" key=\"poderão\" value=\"poderá\"/>")};
     
// Rule 46
cgToken{NOT(IS(NUMERAL))}
cgToken{REGEXP(cgToken.lexeme, "a", true)}
NUMERAL
cgToken{OR(IS(EXP_TEMPO_S), IS(EXP_TEMPO_P))
->MARKONCE(PROBLEM,2,3,4), CREATE(PROBLEM_INFO,2,3,4,
    "description" = "Opte pelo verbo \"haver\", no singular, para indicar tempo decorrido.",
    "suggestion" = "<Replace index=\"1\"> <Lexeme>há</Lexeme> </Replace>")};
    
cgToken{AND(STARTSWITH(cgSentence), REGEXP(cgToken.lexeme, "a", true))}
NUMERAL
cgToken{OR(IS(EXP_TEMPO_S), IS(EXP_TEMPO_P))
->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_INFO,1,2,3,
    "description" = "Opte pelo verbo \"haver\", no singular, para indicar tempo decorrido.",
    "suggestion" = "<Replace index=\"0\"> <Lexeme>há</Lexeme> </Replace>")};


// Rule 47
cgToken{REGEXP(cgToken.lexeme, "a", true)}
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2), CREATE(PROBLEM_INFO,1,2,
    "description" = "Opte pelo verbo \"haver\", no singular, para indicar tempo decorrido.",
    "suggestion" = "<Replace index=\"0\"> <Lexeme>há</Lexeme> </Replace>")};
    
// Rule 48
cgToken{REGEXP(cgToken.lexeme, "haviam", true)}
NUMERAL
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_INFO,1,2,3,
    "description" = "As formas do verbo \"haver\" ficam no singular quando indicam tempo decorrido.",
    "suggestion" = "<Replace index=\"0\"> <Lexeme>havia</Lexeme> </Replace>")};
    
// Rule 49
cgToken{REGEXP(cgToken.lexeme, "haviam", true)}
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2), CREATE(PROBLEM_INFO,1,2,
    "description" = "As formas do verbo \"haver\" ficam no singular quando indicam tempo decorrido.",
    "suggestion" = "<Replace index=\"0\"> <Lexeme>havia</Lexeme> </Replace>")};

// Rule 50
cgToken{REGEXP(cgToken.lexeme,"(haviam|haverão)",true)}
PLURAL_NOUN{
->MARKONCE(PROBLEM,1,2), CREATE(PROBLEM_INFO,1,2,
    "description" = "\"Haver\" no sentido de existir é usado na 3a. pessoa do singular.",
    "suggestion" = "<ReplaceMapping index=\"0\" key=\"haviam\" value=\"havia\"/> <ReplaceMapping index=\"0\" key=\"haverão\" value=\"haverá\"/>")};

// Rule 51
cgToken{REGEXP(cgToken.lexeme,"(devem|deveriam|deverão|podem|poderiam)",true)}
cgToken{REGEXP(cgToken.lexeme,"haver", true)}
PLURAL_NOUN{
->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_INFO,1,2,3,
    "description" = "\"Haver\" (existir), precedido de verbo aux., é usado na 3a. do singular.",
    "suggestion" = "")};


