PACKAGE cogroo.ruta;

TYPESYSTEM BaseTypeSystem;

IMPORT opennlp.uima.Token FROM TypeSystem AS cgToken;

DECLARE FAZER_TEMPO;
DECLARE EXP_TEMPO;
DECLARE EXP_TEMPO_P;
DECLARE VERB_LIST;

// TODO: Falta testar: faltaram os engines dos scripts.

// Os erros apontados pelo eclipse são gerados pela falta dos engines.

cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme,"(fazem|fizeram|farão)",true)) -> FAZER_TEMPO};
cgToken{AND(IS(NOUN),REGEXP(cgToken.lexeme,"(horas|dias|semanas|meses|bimestres|
    trimestres|quadrimestres|semestres|anos|décadas|séculos|milênios)",true)) -> EXP_TEMPO_P};
cgToken{OR(IS(EXP_TEMPO_P),REGEXP(cgToken.lexeme,"(hora|dia|semana|mês|bimestre|
    trimestre|quadrimestre|semestre|ano|década|século|milênio)",true)) -> EXP_TEMPO};
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme,"(vão|iam|devem|deviam|deveriam|
    deverão|podem|podiam|poderiam|poderão)",true)) -> VERB_LIST};

// Rule 42
cgToken{NOT(IS(PERSONAL_PRONOUN))}
FAZER_TEMPO
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_DESCRIPTION,1,2,3,"description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.")};
    
// Rule 43
cgToken{NOT(IS(PERSONAL_PRONOUN))}
FAZER_TEMPO
NUMERAL EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_DESCRIPTION,1,2,3,"description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.")};
   
// Rule 44
cgToken{NOT(IS(PERSONAL_PRONOUN))}
VERB_LIST
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme, "fazer", true))}
NUMERAL EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_DESCRIPTION,1,2,3,"description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.")};
    
// Rule 45
cgToken{NOT(IS(PERSONAL_PRONOUN))}
VERB_LIST
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme, "fazer", true))}
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_DESCRIPTION,1,2,3,"description" = "\"Fazer\", quando indica tempo, deve permanecer no singular.")};
    
// TODO: Rule 46
//cgToken{NOT(IS(NUMERAL))}
//cgToken{REGEXP(cgToken.lexeme, "a", true)}
//NUMERAL
//EXP_TEMPO
//{->MARKONCE(PROBLEM,2,3,4), CREATE(PROBLEM_DESCRIPTION,2,3,4,"description" = "Opte pelo verbo \"haver\", no singular, para indicar tempo decorrido.")};
    
// Rule 47
cgToken{AND(IS(PREPOSITION),REGEXP(cgToken.lexeme, "a", true))}
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2), CREATE(PROBLEM_DESCRIPTION,1,2,"description" = "Opte pelo verbo \"haver\", no singular, para indicar tempo decorrido.")};
    
// Rule 48
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme, "haviam", true))}
NUMERAL EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_DESCRIPTION,1,2,3,"description" = "As formas do verbo \"haver\" ficam no singular quando indicam tempo decorrido.")};
    
// Rule 49
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme, "haviam", true))}
EXP_TEMPO_P
{->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_DESCRIPTION,1,2,3,"description" = "As formas do verbo \"haver\" ficam no singular quando indicam tempo decorrido.")};

// Rule 50
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme,"(haviam|haverão)",true))}
NOUN{IS(PLURAL)
->MARKONCE(PROBLEM,1,2), CREATE(PROBLEM_DESCRIPTION,1,2,"description" = "\"Haver\" no sentido de existir é usado na 3a. pessoa do singular.")};

// Rule 51
cgToken{AND(IS(VERB),REGEXP(cgToken.lexeme,"(devem|deveriam|deverão|podem|poderiam)",true))}
cgToken{AND(IS(INFINITE_VERB),FEATURE("lexeme","haver"))} NOUN{IS(PLURAL) 
->MARKONCE(PROBLEM,1,2,3), CREATE(PROBLEM_DESCRIPTION,1,2,3,"description" = "\"Haver\" (existir), precedido de verbo aux., é usado na 3a. do singular.")};


