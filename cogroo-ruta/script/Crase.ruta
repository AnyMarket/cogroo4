PACKAGE cogroo.ruta;

TYPESYSTEM BaseTypeSystem;

IMPORT opennlp.uima.Token FROM TypeSystem AS cgToken;

DECLARE LEXEME_A, LEXEME_AS, LEXEME_A_OR_AS;
DECLARE PREPOSITION_A, ARTICLE_A;
DECLARE CRASE, CRASE_A, CRASE_AS;

DECLARE PRON_TRATAMENTO;
DECLARE EM_RELACAO, COM_RELACAO;





cgToken{REGEXP(cgToken.lexeme, "a", true) -> LEXEME_A};
cgToken{REGEXP(cgToken.lexeme, "as", true) -> LEXEME_AS};
cgToken{OR(IS(LEXEME_A), IS(LEXEME_AS))-> LEXEME_A_OR_AS};
cgToken{AND(IS(PREPOSITION), IS(LEXEME_A_OR_AS)) -> PREPOSITION_A};
cgToken{AND(AND(AND(IS(ARTICLE), IS(FEMALE))), IS(LEXEME_A_OR_AS)) -> ARTICLE_A};
cgToken{AND(IS(PREPOSITION_A), IS(ARTICLE_A)) -> MARKONCE(CRASE)};

cgToken{AND(IS(CRASE), IS(SINGULAR)) -> MARKONCE(CRASE_A)};
cgToken{AND(IS(CRASE), IS(PLURAL))   -> MARKONCE(CRASE_AS)};
 

cgToken{REGEXP(cgToken.lexeme, "em_relação", true) ->  EM_RELACAO};

cgToken{REGEXP(cgToken.lexeme, "com", true)}
cgToken{REGEXP(cgToken.lexeme, "relação", true)  -> CREATE(COM_RELACAO, 1, 2, )};


// rules 1 and 2
CRASE
MALE_NOUN{
 -> MARKONCE(PROBLEM, 1, 2), CREATE(PROBLEM_INFO, 1, 2,
    "description" = "Crase com substantivo masculino.",
    "suggestion" = "<Replace index=\"0\">  <Lexeme/> </Replace><Replace index=\"1\">    <Lexeme>ao</Lexeme>  </Replace>")};

// rules 2 and 3
CRASE_A
PLURAL_NOUN{
 -> MARKONCE(PROBLEM, 1, 2), CREATE(PROBLEM_INFO, 1, 2,
    "description" = "Crase com substantivo no plural.",
    "suggestion" = "<Replace index=\"0\">  <Lexeme/> </Replace><Replace index=\"1\">    <Lexeme>a</Lexeme>  </Replace>")};

// rule 4
CRASE
VERB{
 -> MARKONCE(PROBLEM, 1, 2), CREATE(PROBLEM_INFO, 1, 2,
    "description" = "Crase antes de verbo.",
    "suggestion" = "<Replace index=\"0\">  <Lexeme/> </Replace><Replace index=\"1\">    <Lexeme>a</Lexeme>  </Replace>")};


// rule 5
cgToken{AND(NOT(IS(CRASE)), IS(LEXEME_A ))}
cgToken{OR(IS(NUMERAL), IS(ARTICLE), IS(PRONOUN))}
cgToken{AND(REGEXP(cgToken.lexeme, "hora"))
-> MARKONCE(PROBLEM, 1, 2, 3), CREATE(PROBLEM_INFO, 1, 2, 3,
    "description" = "Ocorre crase em expressões indicativas de horas.",
    "suggestion" = "<Replace index=\"0\"> <Lexeme>à</Lexeme></Replace>")};

// rule 6
cgToken{AND(NOT(IS(CRASE)), IS(LEXEME_AS)) -> CREATE(SUGGESTION, "text" = "às")}
cgToken{OR(IS(NUMERAL), IS(ARTICLE), IS(PRONOUN))} cgToken{AND(REGEXP(cgToken.lexeme, "horas"))
-> MARKONCE(PROBLEM, 1, 2, 3), CREATE(PROBLEM_INFO, 1, 2, 3,
        "description" = "Ocorre crase em expressões indicativas de horas.",
        "suggestion" = "<Replace index=\"0\"> <Lexeme>às</Lexeme></Replace>")};


// rules 7 and 8
cgToken{AND(NOT(IS(CRASE)), IS(LEXEME_A))}
cgToken{REGEXP(cgToken.lexeme, "(direita|esquerda)", true)}
cgToken{AND(REGEXP(cgToken.lexeme, "de", true))
-> MARKONCE(PROBLEM, 1, 2, 3), CREATE(PROBLEM_INFO, 1, 2, 3,
    "description" = "Ocorre crase em expressões indicativas de modo, tempo, lugar etc.",
    "suggestion" = "<Replace index=\"0\"><Lexeme>à</Lexeme></Replace>")};

// rules 15 and 16
cgToken{REGEXP(cgToken.lexeme, "vossa_(senhoria|majestade|eminência|excelência|reverendíssima|santidade)", true) -> PRON_TRATAMENTO};
cgToken{REGEXP(cgToken.lexeme, "você", true) -> PRON_TRATAMENTO};

CRASE_A
cgToken{IS(PRON_TRATAMENTO)
-> MARKONCE(PROBLEM, 1, 2), CREATE(PROBLEM_INFO, 1, 2, 
    "description" = "Pronomes de tratamento não admitem artigo, logo não há crase aqui.",
    "suggestion" = "<Replace index=\"0\"><Lexeme/> </Replace><Replace index=\"1\"><Lexeme>a</Lexeme></Replace>")};

// rule 9
EM_RELACAO 
cgToken{AND(IS(LEXEME_A),  NOT(IS(CRASE)))}
cgToken{AND(IS(NOUN), IS(FEMALE), IS(SINGULAR)) 
-> MARKONCE(PROBLEM, 1, 2, 3, 4), CREATE(PROBLEM_INFO, 1, 2, 3, 4,
    "description" = "\"Em relação\" rege a preposição \"a\", logo há crase aqui.",
    "suggestion" = "<Replace index=\"0\"><Lexeme>à</Lexeme></Replace>")};

// rule 10
EM_RELACAO
cgToken{AND(IS(LEXEME_AS), NOT(IS(CRASE)))}
cgToken{AND(IS(NOUN), IS(FEMALE), IS(PLURAL))
-> MARKONCE(PROBLEM, 1, 2, 3, 4), CREATE(PROBLEM_INFO, 1, 2, 3, 4,
    "description" = "\"Em relação\" rege a preposição \"a\", logo há crase aqui.",
    "suggestion" = "<Replace index=\"0\"><Lexeme>às</Lexeme></Replace>")};

// rule 11
COM_RELACAO
cgToken{AND(IS(LEXEME_A ), NOT(IS(CRASE)))}
cgToken{AND(IS(NOUN), IS(FEMALE), IS(SINGULAR))
-> MARKONCE(PROBLEM, 1, 2, 3, 4), CREATE(PROBLEM_INFO, 1, 2, 3, 4,
    "description" = "\"Com relação\" rege a preposição \"a\", logo há crase aqui.",
    "suggestion" = "<Replace index=\"0\"><Lexeme>à</Lexeme></Replace>")};

// rule 12
COM_RELACAO
cgToken{AND(IS(LEXEME_AS), NOT(IS(CRASE)))}
cgToken{AND(IS(NOUN), IS(FEMALE), IS(PLURAL))
-> MARKONCE(PROBLEM, 1, 2, 3, 4), CREATE(PROBLEM_INFO, 1, 2, 3, 4,
    "description" = "\"Com relação\" rege a preposição \"a\", logo há crase aqui.",
    "suggestion" = "<Replace index=\"0\"><Lexeme>às</Lexeme></Replace>")};

// rule 13
cgToken{REGEXP(cgToken.lexeme, "devido", true)}
cgToken{AND(IS(LEXEME_A ), NOT(IS(CRASE)))}
cgToken{AND(IS(NOUN), IS(FEMALE), IS(SINGULAR))
-> MARKONCE(PROBLEM, 1, 2, 3, 4), CREATE(PROBLEM_INFO, 1, 2, 3, 4,
    "description" = "\"Devido\" rege a preposição \"a\", logo há crase aqui.",
    "suggestion" = "<Replace index=\"0\"><Lexeme>à</Lexeme></Replace>")};

// rule 14
cgToken{REGEXP(cgToken.lexeme, "devido", true)}
cgToken{AND(IS(LEXEME_AS), NOT(IS(CRASE)))}
cgToken{AND(IS(NOUN), IS(FEMALE), IS(PLURAL))
-> MARKONCE(PROBLEM, 1, 2, 3, 4), CREATE(PROBLEM_INFO, 1, 2, 3, 4,
    "description" = "\"Devido\" rege a preposição \"a\", logo há crase aqui.",
    "suggestion" = "<Replace index=\"0\"><Lexeme>às</Lexeme></Replace>")};
