PACKAGE cogroo.ruta;
TYPESYSTEM TypeSystem;

IMPORT opennlp.uima.Chunk           FROM TypeSystem AS cgChunk;
IMPORT opennlp.uima.Sentence        FROM TypeSystem AS cgSentence;
IMPORT opennlp.uima.SyntacticChunk  FROM TypeSystem AS cgSChunk;
IMPORT opennlp.uima.Token           FROM TypeSystem AS cgToken;

DECLARE ADJECTIVE;    
DECLARE ADVERB;    
DECLARE ARTICLE;
    DECLARE DEFINITE, INDEFINITE;
DECLARE CONJUNCTION;
    DECLARE SUBORDINATING_CONJUNCTION;     
    DECLARE COORDINATING_CONJUNCTION;     
DECLARE INTERJECTION;     
DECLARE NOUN;      
    DECLARE PROPER_NOUN;   
DECLARE NUMERAL;
DECLARE PREPOSITION;    
DECLARE PRONOUN;
    DECLARE PERSONAL_PRONOUN, DETERMINATIVE_PRONOUN, INDEPENDENT_PRONOUN;   
DECLARE VERB;      
    DECLARE FINITE_VERB, INFINITE_VERB, PARTICIPLE_VERB, GERUND_VERB;
    DECLARE PRESENT, IMPERFECT, SIMPLE_PERFECT, PLU_PERFECT, FUTURE, CONDITIONAL;
    DECLARE INDICATIVE, SUBJUNCTIVE, IMPERATIVE;

DECLARE MALE, FEMALE;
DECLARE SINGULAR, PLURAL;
DECLARE FIRST_PERSON, SECOND_PERSON, THIRD_PERSON;

DECLARE FEMALE_NOUN;
DECLARE MALE_NOUN;
DECLARE PLURAL_NOUN;
DECLARE SINGULAR_NOUN;

DECLARE PROBLEM;
DECLARE Annotation PROBLEM_DESCRIPTION (String description);

// adjective
cgToken{FEATURE("pos","adj") -> ADJECTIVE};
cgToken{FEATURE("pos","n-adj") -> ADJECTIVE};

// adverb
cgToken{FEATURE("pos","adv") -> ADVERB};

// article
cgToken{FEATURE("pos", "art") -> ARTICLE};
cgToken{AND(IS(ARTICLE), REGEXP(cgToken.lexeme, "u.*")) -> INDEFINITE};
cgToken{AND(IS(ARTICLE), NOT(REGEXP(cgToken.lexeme, "u.*"))) -> DEFINITE};

// conjunction
cgToken{FEATURE("pos","conj-s") -> CONJUNCTION, SUBORDINATING_CONJUNCTION};
cgToken{FEATURE("pos","conj-c") -> CONJUNCTION, COORDINATING_CONJUNCTION};

// interjection
cgToken{FEATURE("pos","intj") -> INTERJECTION};

// noun
cgToken{FEATURE("pos","n") -> NOUN};
cgToken{FEATURE("pos","prop") -> NOUN, PROPER_NOUN};

// numeral
cgToken{FEATURE("pos","num") -> NUMERAL};

// preposition
cgToken{FEATURE("pos","prp") -> PREPOSITION};

// pronoun
cgToken{FEATURE("pos","pron-pers") -> PRONOUN, PERSONAL_PRONOUN};
cgToken{FEATURE("pos","pron-det") -> PRONOUN, DETERMINATIVE_PRONOUN};
cgToken{FEATURE("pos","pron-indp") -> PRONOUN, INDEPENDENT_PRONOUN};

// verb
cgToken{FEATURE("pos","v-fin") -> VERB, FINITE_VERB};
cgToken{FEATURE("pos","v-inf") -> VERB, INFINITE_VERB};
cgToken{FEATURE("pos","v-pep") -> VERB, PARTICIPLE_VERB};
cgToken{FEATURE("pos","v-ger") -> VERB, GERUND_VERB};
cgToken{REGEXP(cgToken.features, ".*IND.*") -> INDICATIVE};
cgToken{REGEXP(cgToken.features, ".*SUBJ.*") -> SUBJUNCTIVE};
cgToken{REGEXP(cgToken.features, ".*IMP.*") -> IMPERATIVE};
cgToken{REGEXP(cgToken.features, ".*.*PR.*.*") -> PRESENT};
cgToken{REGEXP(cgToken.features, ".*IMPF.*") -> IMPERFECT};
cgToken{REGEXP(cgToken.features, ".*PS.*") -> SIMPLE_PERFECT};
cgToken{REGEXP(cgToken.features, ".*MQP.*") -> PLU_PERFECT};
cgToken{REGEXP(cgToken.features, ".*FUT.*") -> FUTURE};
cgToken{REGEXP(cgToken.features, ".*COND.*") -> CONDITIONAL};

// complements 
// GENDER:
cgToken{FEATURE("features", "M=S") -> MALE, SINGULAR};
cgToken{FEATURE("features", "M=P") -> MALE, PLURAL};
cgToken{FEATURE("features", "F=S") -> FEMALE, SINGULAR};
cgToken{FEATURE("features", "F=P") -> FEMALE, PLURAL};
// PERSON:
cgToken{REGEXP(cgToken.features, ".*1[PS].*") -> FIRST_PERSON};
cgToken{REGEXP(cgToken.features, ".*2[PS].*") -> SECOND_PERSON};
cgToken{REGEXP(cgToken.features, ".*3[PS].*") -> THIRD_PERSON};
// NUMBER (singular/plural):
cgToken{REGEXP(cgToken.features, ".*[1-3]P.*") -> PLURAL};
cgToken{REGEXP(cgToken.features, ".*[1-3]S.*") -> SINGULAR};


// combinations 
cgToken{AND(IS(MALE), IS(NOUN)) -> MALE_NOUN};
cgToken{AND(IS(FEMALE), IS(NOUN)) -> FEMALE_NOUN};
cgToken{AND(IS(PLURAL), IS(NOUN)) -> PLURAL_NOUN};
cgToken{AND(IS(SINGULAR), IS(NOUN)) -> SINGULAR_NOUN};

